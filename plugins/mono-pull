#!/usr/bin/env bash

usage() {
  cat <<-EOT
Usage: mono pull [options] <repository> [<ref>]
   or: mono pull [options] --all [<ref>]
   or: mono pull -h|--help

Pull recent changes fetches the given <ref> from the specified remote <repository> into the
corresponding subtree. If <ref> is omitted, the corresponding value in subtree.conf is taken
into account. As with normal git pull, this doesn’t remove your own local changes; it just
merges those changes into the latest <local-commit>.
With --squash, create only one commit that contains all the changes, rather than merging in
the entire history.

Arguments:

    <repository>  The repository url or directory name of the subproject.
    <ref>         The remote reference. Defaults to current branch.

Options:

  --all           Pull all subtrees.
  --squash        Merge subtree changes as a single commit.
  --debug         Provide debug information.
  -h|--help       Show this help text.

EOT
}

pull_subtree () {
  REMOTE_NAME=$1
  BRANCH=$2
  OPT_SQUASH=$3
  OPT_DEBUG=''
  if [[ -n "$debug" ]]; then
    OPT_DEBUG=" -d"
  fi

  DIRECTORY=$(get_prefix "$REMOTE_NAME") || exit 1
  if [[ ! -d "$DIRECTORY" ]]; then
    debug "Subtree $DIRECTORY is not included in this branch"
  else
    debug "$MONO_COMMAND: Prefix: $DIRECTORY"
    BRANCH=${BRANCH:-$(git rev-parse --abbrev-ref HEAD)} || exit 1
    debug "$MONO_COMMAND: Branch: $BRANCH"

    debug "$MONO_COMMAND: Pulling subtree from branch $BRANCH"
    debug "git subtree pull --prefix=\"$DIRECTORY\" \"$REMOTE_NAME\" \"$BRANCH\" $OPT_SQUASH"
    git subtree$OPT_DEBUG pull --prefix="$DIRECTORY" "$REMOTE_NAME" "$BRANCH" $OPT_SQUASH || exit 1
  fi
}

OPT_SQUASH=
OPT_ALL=0
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case $1 in
  --all)
    OPT_ALL=1
    shift # past argument
    ;;
  --squash)
    OPT_SQUASH=" --squash"
    shift # past argument
    ;;
  --debug)
    OPT_DEBUG=1
    shift # past argument
    ;;
  -q)
    OPT_QUIET=1
    shift # past argument
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  -*) # unknown option
    say "Unknown option »$1«"
    usage
    exit 1
    ;;
  *)
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac
done

source "$MONO_PLUGIN_DIR"/mono_commons
debug=$OPT_DEBUG
quiet=$OPT_QUIET

require_work_tree
ensure_clean

if [[ $OPT_ALL -eq 0 ]]; then
  REMOTE_NAME=${POSITIONAL[0]}
  debug "$MONO_COMMAND: Pulling single subtree $REMOTE_NAME"
  if [[ ${#REMOTE_NAME} -eq 0 ]]; then
    say "$MONO_COMMAND: Remote name is required"
    exit 1
  fi
  BRANCH=${POSITIONAL[1]:-$(get_remote_branch "$REMOTE_NAME")}
  pull_subtree "$REMOTE_NAME" "$BRANCH" $OPT_SQUASH
else
  debug "$MONO_COMMAND: Pulling all subtrees"
  debug "$MONO_COMMAND: Requested branch is '${POSITIONAL[0]}'"
  while read prefix remote_name remote_url branch; do
    debug "$MONO_COMMAND: Default branch is '$branch'"
    BRANCH=${POSITIONAL[0]:-$branch}
    debug "$MONO_COMMAND: Pulling branch '$BRANCH' for $remote_name"
    pull_subtree "$remote_name" "$BRANCH" $OPT_SQUASH
  done < subtree.conf
fi

debug "$MONO_COMMAND: Done."
debug ""
