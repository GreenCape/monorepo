#!/usr/bin/env bash

usage () {
  cat <<-EOT
Usage: mono add [options] <repository> [<prefix>]
   or: mono add -h|--help

Create the <prefix> subtree by importing its contents from the given
<repository> and remote <branch>. A new commit is created
automatically, joining the imported project’s history with your own.
With --squash, imports only a single commit from the subproject, rather
than its entire history.

Arguments:

    <repository>  The repository url or directory name of the subproject.
    <prefix>      The directory to contain the imported subproject. Defaults to
                  the repository name of the imported subproject prefixed by
                  $MONO_PREFIX.

Options:

  -n|--name=<name>       The name of the subproject. Defaults to the repository
                         name of the imported subproject.
  -b|--branch=<branch>   A valid remote ref, defaults to branch with the same name as the local branch.
  --squash               Merge subtree changes as a single commit.
  -h|--help              Show this help text.

EOT
}

OPT_SQUASH=
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case $1 in
  -n | --name)
    REMOTE_NAME="$2"
    shift # past argument
    shift # past value
    ;;
  -n=* | --name=*)
    REMOTE_NAME="${1#*=}"
    shift # past argument=value
    ;;
  -b | --branch)
    BRANCH="$2"
    shift # past argument
    shift # past value
    ;;
  -b=* | --branch=*)
    BRANCH="${1#*=}"
    shift # past argument=value
    ;;
  --squash)
    OPT_SQUASH=" --squash"
    shift # past argument
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  -*) # unknown option
    echo "$MONO_COMMAND: Unknown option »$1«"
    usage
    exit 1
    ;;
  *)
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac
done

# Get positional arguments
REMOTE_URL=${POSITIONAL[0]}
DIRECTORY=${POSITIONAL[1]}

require_work_tree
ensure_clean

if [[ ${#REMOTE_NAME} -eq 0 ]]; then
  REMOTE_NAME=$(basename "${REMOTE_URL/%.git/}")
fi

if [[ ${#DIRECTORY} -eq 0 ]]; then
  DIRECTORY="$MONO_PREFIX$REMOTE_NAME"
fi

echo "$MONO_COMMAND: Checking for remote reference $REMOTE_NAME"
git ls-remote --exit-code "$REMOTE_NAME" &>/dev/null
if [[ $? -eq 0 ]]; then
  echo "$MONO_COMMAND: Remote »$REMOTE_NAME« already exists, pointing to $(git remote get-url "$REMOTE_NAME")"
else
  echo "$MONO_COMMAND: Adding remote reference"
  git remote add "$REMOTE_NAME" --no-tags "$REMOTE_URL" || exit 1
fi

BRANCH=${BRANCH:-$(git rev-parse --abbrev-ref HEAD)}

echo "$MONO_COMMAND: Adding subtree from branch $BRANCH"
git subtree add --prefix="$DIRECTORY" "$REMOTE_NAME" "$BRANCH" $OPT_SQUASH
touch .git/subtrees
echo "$REMOTE_NAME $DIRECTORY $REMOTE_URL" >> .git/subtrees

echo "$MONO_COMMAND: Done."
echo ""
